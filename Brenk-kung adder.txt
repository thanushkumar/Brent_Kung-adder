VHDL Code:

Test Bench:

module bk_adder_8bit (
  input [7:0] A, B,
  input C,
  output [7:0] S,
  output C_OUT
);
 wire [7:0] P, G; 
wire C0, C1, C2, C3, C4, C5, C6, C7;
 
assign P[0] = A[0] ^ B[0]; 
assign G[0] = A[0] & B[0];
 
assign P[1] = A[1] ^ B[1];
assign G[1] = A[1] & B[1];
 
assign P[2] = A[2] ^ B[2]; 
assign G[2] = A[2] & B[2];
 
assign P[3] = A[3] ^ B[3];
assign G[3] = A[3] & B[3]; 
 
assign P[4] = A[4] ^ B[4];
assign G[4] = A[4] & B[4];
 
assign P[5] = A[5] ^ B[5]; 
assign G[5] = A[5] & B[5];
 
assign P[6] = A[6] ^ B[6];
assign G[6] = A[6] & B[6]; 
 
assign P[7] = A[7] ^ B[7];
assign G[7] = A[7] & B[7];
 
assign C0 = G[0]; 
 
assign C1 = G[1] | (P[1] & C0);
 
assign C2 = G[2] | (P[2] & G[1]);
 
assign C3 = G[3] | (P[3] & G[2]) | (P[3] & P[2] & C0); 
 
assign C4 = G[4] | (P[4] & G[3]);
 
assign C5 = G[5] | (P[5] & G[4]) | (P[5] & P[4] & C3);
 
assign C6 = G[6] | (P[6] & G[5]); 
 
assign C7 = G[7] | (P[7] & G[6]) | (P[7] & P[6] & C5);
 
assign S[0] = P[0];
 
assign S[1] = P[1] ^ C0; 
 
assign S[2] = P[2] ^ C1;
 
assign S[3] = P[3] ^ C2;
 
assign S[4] = P[4] ^ C3;
 
assign S[5] = P[5] ^ C4;
 
assign S[6] = P[6] ^ C5;
 
assign S[7] = P[7] ^ C6;
 
assign C_OUT = C7;
 
endmodule

Design Under TestBench:

`timescale 1ns / 1ps
module TB_BK_ADDER;
 
// Inputs
reg [7:0] A;
reg [7:0] B;
reg C;
 
// Outputs
wire [7:0] S;
wire C_OUT;
// Instantiate the Unit Under Test (UUT)
bk_adder_8bit uut (
.A(A), 
.B(B), 
.C(C), 
.S(S), 
.C_OUT(C_OUT)
);
 
initial begin
    // Initialize inputs
    A = 0; 
    B = 0;
 C = 0;
 
 
   // Apply test vectors
    #10 A = 8'b0000_0001; B = 8'b0000_0001; C = 0;
    #10 A = 8'b0000_0010; B = 8'b0000_0010; C = 0;
    #10 A = 8'b0000_0100; B = 8'b0000_1000; C = 0;
    #10 A = 8'b1000_0000; B = 8'b0100_0000; C = 0; 
    #10 A = 8'b1010_1010; B = 8'b0101_0101; C = 0;
 #100;
 A = $random;
 B = $random;
 C = 0;
 
 #100;
 A = $random;
 B = $random;
 C = 0;
 
 #100;
 A = 8'b1111_1111;
 B = 8'b1111_1111;
 C = 0;
    // Finish simulation
    //#10 $finish;
 
    $display("A = %b, B = %b, C = %b, S = %b, C_OUT = %b", A, B, C, S, C_OUT);
end
      
endmodule
